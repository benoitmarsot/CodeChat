Author:   
Committer:   
Parent: e3954ff1762bd48f59e48897f0712b107ec24886 (Project Management System)
Branch: 
Follows: 
Precedes: 

    Local uncommitted changes, not checked in to index

---------------------- codechatui/lib/src/chat_page.dart ----------------------
index 1c9d0b0..d3b63ad 100644
@@ -1,4 +1,7 @@
+import 'dart:async';
+
 import 'package:codechatui/src/services/auth_provider.dart';
+import 'package:codechatui/src/services/message_service.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter/services.dart';  // Add this import for keyboard keys
 import 'package:codechatui/src/models/project.dart';
@@ -22,6 +25,7 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
   late AuthProvider authProvider;
   late TabController _tabController;
   late DiscussionService _discussionService;
+  late MessageService _messageService;
   final TextEditingController _messageController = TextEditingController();
   final ScrollController _scrollController = ScrollController();
   final FocusNode _messageFocusNode = FocusNode();  // Add this for keyboard handling
@@ -43,6 +47,7 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
      authProvider = Provider.of<AuthProvider>(context, listen: false);
     _tabController = TabController(length: 2, vsync: this);
     _discussionService = DiscussionService(authProvider: authProvider);
+    _messageService = MessageService(authProvider: authProvider);
     
     // Method 1: Using addPostFrameCallback (recommended)
     WidgetsBinding.instance.addPostFrameCallback((_) {
@@ -100,7 +105,7 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
     });
     
     try {
-      final messages = await _discussionService.getDiscussionMessages(discussionId);
+      final messages = await _messageService.getMessagesByDiscussionId(discussionId);
       setState(() {
         _messages.addAll(messages);
         _selectedDiscussionId = discussionId;
@@ -126,33 +131,125 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
 
   Future<void> _sendMessage() async {
     if (_messageController.text.trim().isEmpty) return;
+    
+    // Save message text and clear input
+    final messageText = _messageController.text;
+    _messageController.clear();
+    
+    // Create new discussion if none selected
     if(_selectedDiscussionId == 0) {
-      Discussion newDiscussion = await _discussionService.createDiscussion(
+      try {
+        final newDiscussion = await _discussionService.createDiscussion(
           widget.project.projectId, 'Discussion ${_discussions.length + 1}'
-      );
-      _selectedDiscussionId = newDiscussion.did;
-      await _loadDiscussions();
+        );
+        _selectedDiscussionId = newDiscussion.did;
+        _discussions.insert(0, newDiscussion);
+      } catch (e) {
+        if(mounted) {
+          ScaffoldMessenger.of(context).showSnackBar(
+            SnackBar(content: Text('Failed to create discussion: $e'))
+          );
+        }
+        return;
+      }
     }
     
-    setState(() {
-      _messages.add(Message(
-        discussionId:_selectedDiscussionId,
-        role: "user",
-        text: _messageController.text,
-
-
-      ));
+    // Send user message
+    final msgRequest = MessageCreateRequest(
+      did: _selectedDiscussionId,
+      role: "user",
+      message: messageText,
+    );
+    
+    try {
+      // Add user message to UI
+      final userMsg = await _discussionService.askQuestion(msgRequest);
+      setState(() {
+        _messages.add(userMsg);
+      });
+      _scrollToBottom();
       
-      // Simulate AI response (in a real app, you would call your API here)
-      _messages.add(Message(
+      // Add a temporary "thinking" message
+      Message thinkingMsg = Message(
         discussionId: _selectedDiscussionId,
         role: "assistant",
-        text: '{"question": "${_messageController.text}", "answers": [{"explanation": "This is a sample response", "language": "java", "code": "print(\\"Hello World\\");", "references": ["Flutter docs"]}]}',
-      ));
-    });
-    
-    _messageController.clear();
-    _scrollToBottom();
+        text: "Thinking...",
+        isLoading: true,
+      );
+      
+      setState(() {
+        _messages.add(thinkingMsg);
+      });
+      _scrollToBottom();
+      
+      // Show dynamic thinking animation
+      int index = _messages.length - 1;
+      int dots = 0;
+      
+      Timer? progressTimer = Timer.periodic(Duration(milliseconds: 500), (timer) {
+        if (!mounted) {
+          timer.cancel();
+          return;
+        }
+        
+        dots = (dots + 1) % 4;
+        String thinking = "Thinking" + ".".padLeft(dots, '.');
+        
+        setState(() {
+          _messages[index] = Message(
+            discussionId: _selectedDiscussionId,
+            role: "assistant", 
+            text: thinking,
+            isLoading: true,
+          );
+        });
+      });
+      
+      // Get actual AI response
+      try {
+        final message = await _discussionService.answerQuestion(_selectedDiscussionId);
+        
+        // Cancel the progress timer
+        progressTimer.cancel();
+        
+        if (mounted) {
+          setState(() {
+            // Remove the temporary message
+            _messages.removeWhere((message) => message.isLoading == true);
+            // Add the real response
+            _messages.add(message);
+          });
+          _scrollToBottom();
+        }
+      } catch (aiError) {
+        // Cancel the progress timer
+        progressTimer.cancel();
+        
+        if (mounted) {
+          setState(() {
+            // Remove the temporary message
+            _messages.removeWhere((message) => message.isLoading == true);
+            
+            // Add error message
+            _messages.add(Message(
+              discussionId: _selectedDiscussionId,
+              role: "assistant",
+              text: "Sorry, I encountered an error: $aiError",
+            ));
+          });
+          ScaffoldMessenger.of(context).showSnackBar(
+            SnackBar(content: Text('Failed to get AI response: $aiError'))
+          );
+          _scrollToBottom();
+        }
+      }
+    } catch (e) {
+      if (mounted) {
+        ScaffoldMessenger.of(context).showSnackBar(
+          SnackBar(content: Text('Failed to send message: $e'))
+        );
+      }
+    }
   }
   
   void _scrollToBottom() {
@@ -251,7 +348,7 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
                     child: TabBarView(
                       controller: _tabController,
                       children: [
-                        // History tab with actual discussions
+                        // History tab with discussions
                         _isLoading 
                           ? const Center(child: CircularProgressIndicator())
                           : Column(
@@ -277,7 +374,7 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
                                 Expanded(
                                   child: _discussions.isEmpty
                                     ? const Center(child: Text('No discussions found'))
-                                    : getDiscussionsList(),
+                                    : _getDiscussionsList(),
                                 ),
                               ],
                             ),
@@ -342,7 +439,7 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
                 setState(() {
                   _leftPanelWidth += details.delta.dx;
                   // Enforce minimum and maximum width constraints
-                  _leftPanelWidth = _leftPanelWidth.clamp(150.0, MediaQuery.of(context).size.width * 0.5);
+                  _leftPanelWidth = _leftPanelWidth.clamp(220.0, MediaQuery.of(context).size.width * 0.5);
                 });
               },
               child: MouseRegion(
@@ -379,7 +476,17 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
                         ? Center(child: Text(
                             'Start a new conversation${_discussions.isNotEmpty ? ' or select one from history' : ''}'
                           ))
-                        : getDiscussionsList(),
+                        : ListView.builder(
+                          controller: _scrollController,
+                          itemCount: _messages.length,
+                          padding: const EdgeInsets.all(16),
+                          itemBuilder: (context, index) {
+                            final message = _messages[index];
+                            return message.role == "user"
+                              ? UserMessageBubble(message: message)
+                              : AIResponseWidget(message: message);
+                          },
+                        ),
                 ),
                 // Input area
                 Container(
@@ -429,7 +536,7 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
         '${date.hour.toString().padLeft(2, '0')}:${date.minute.toString().padLeft(2, '0')}';
   }
   
-  ListView getDiscussionsList() {
+  ListView _getDiscussionsList() {
     return ListView.builder(
       itemCount: _discussions.length,
       itemBuilder: (context, index) {
@@ -437,55 +544,81 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
         return Tooltip(
           message: 'Created: ${_formatDate(discussion.created)}\n'
                   '${discussion.description.isNotEmpty ? discussion.description : discussion.name}',
-          preferBelow: false,
+          preferBelow: true,
           verticalOffset: 20,
           child: ListTile(
-            title: Text(discussion.name),
-            subtitle: discussion.description.isNotEmpty 
-                ? Text(discussion.description, 
-                    maxLines: 1, overflow: TextOverflow.ellipsis)
-                : null,
-            selected: _selectedDiscussionId == discussion.did,
-            onTap: () => _selectDiscussion(discussion.did),
-            trailing: PopupMenuButton<String>(
-              tooltip: 'Discussion options',
-              onSelected: (value) => _handleDiscussionAction(value, discussion),
-              itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[
-                const PopupMenuItem<String>(
-                  value: 'suggest_name',
-                  child: ListTile(
-                    leading: Icon(Icons.auto_awesome),
-                    title: Text('Suggest name'),
-                    dense: true,
-                  ),
+            minLeadingWidth: 8,
+            horizontalTitleGap: 4,
+            contentPadding: const EdgeInsets.only(left: 4, right: 0), // Remove right padding completely
+            dense: true, // Make the ListTile more compact overall
+            leading: Padding(
+              padding: const EdgeInsets.only(left: 0),
+              child: InkWell(
+                onTap: () => _toggleFavorite(discussion),
+                child: Icon(
+                  discussion.isFavorite ? Icons.star : Icons.star_border,
+                  color: discussion.isFavorite ? Colors.amber : Colors.grey,
+                  size: 14,
                 ),
-                const PopupMenuItem<String>(
-                  value: 'rename',
-                  child: ListTile(
-                    leading: Icon(Icons.edit),
-                    title: Text('Rename'),
-                    dense: true,
-                  ),
-                ),
-                const PopupMenuItem<String>(
-                  value: 'description',
-                  child: ListTile(
-                    leading: Icon(Icons.description),
-                    title: Text('Add/edit description'),
-                    dense: true,
+              ),
+            ),
+            title: Row(
+              children: [
+                Expanded(
+                  child: Text(
+                    discussion.name,
+                    style: const TextStyle(fontSize: 13),
                   ),
                 ),
-                const PopupMenuDivider(),
-                const PopupMenuItem<String>(
-                  value: 'delete',
-                  child: ListTile(
-                    leading: Icon(Icons.delete, color: Colors.red),
-                    title: Text('Delete', style: TextStyle(color: Colors.red)),
-                    dense: true,
+                SizedBox(
+                  width: 16,
+                  height: 24,
+                  child: PopupMenuButton<String>(
+                    padding: EdgeInsets.zero,
+                    icon: Icon(
+                      Icons.more_vert,
+                      size: 16,
+                    ),
+                    iconSize: 16,
+                    tooltip: 'Discussion options',
+                    onSelected: (value) => _handleDiscussionAction(value, discussion),
+                    itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[
+                      const PopupMenuItem<String>(
+                        value: 'suggest_name',
+                        child: ListTile(
+                          leading: Icon(Icons.auto_awesome),
+                          title: Text('Auto-catalog'),
+                          dense: true,
+                        ),
+                      ),
+                      const PopupMenuItem<String>(
+                        value: 'rename',
+                        child: ListTile(
+                          leading: Icon(Icons.edit),
+                          title: Text('Rename & describe'),
+                          dense: true,
+                        ),
+                      ),
+                      const PopupMenuDivider(),
+                      const PopupMenuItem<String>(
+                        value: 'delete',
+                        child: ListTile(
+                          leading: Icon(Icons.delete, color: Colors.red),
+                          title: Text('Delete', style: TextStyle(color: Colors.red)),
+                          dense: true,
+                        ),
+                      ),
+                    ],
                   ),
                 ),
+                const SizedBox(width: 8),
+
               ],
             ),
+            // Remove the trailing property since we've embedded it in the title row
+            trailing: null,
+            selected: _selectedDiscussionId == discussion.did,
+            onTap: () => _selectDiscussion(discussion.did),
           ),
         );
       },
@@ -499,8 +632,6 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
         _suggestDiscussionName(discussion);
       case 'rename':
         _renameDiscussion(discussion);
-      case 'description':
-        _editDiscussionDescription(discussion);
       case 'delete':
         _deleteDiscussion(discussion);
     }
@@ -527,41 +658,96 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
     );
     
     try {
-      // In a real app, you would call your backend AI service here
-      await Future.delayed(const Duration(seconds: 2)); // Simulating API call
+      List<DiscussionNameSuggestion> response = await _discussionService.getNamesSuggestion(discussion.did);
       
       // Close loading dialog
       if (mounted) Navigator.of(context).pop();
       
       // Show suggestion dialog with mock response
       if (mounted) {
-        final suggestedName = "Chat about ${widget.project.name} architecture";
-        
+        int selectedIndex = -1; // Track selected suggestion
+
         showDialog(
           context: context,
           builder: (BuildContext context) {
-            return AlertDialog(
-              title: const Text("Suggested Name"),
-              content: Text("AI suggests: \"$suggestedName\""),
-              actions: [
-                TextButton(
-                  onPressed: () {
-                    Navigator.pop(context);
-                  },
-                  child: const Text("Cancel"),
-                ),
-                TextButton(
-                  onPressed: () {
-                    Navigator.pop(context);
-                    // Apply the suggestion
-                    // In a real app, you would update the discussion name via API
-                    setState(() {
-                      // Here you would make an API call to update the name
-                    });
-                  },
-                  child: const Text("Apply"),
-                ),
-              ],
+            return StatefulBuilder( // Use StatefulBuilder to manage dialog state
+              builder: (context, setState) {
+                return AlertDialog(
+                  title: const Text("Suggested Names"),
+                  content: SizedBox(
+                    width: MediaQuery.of(context).size.width / 3,
+                    child: Column(
+                      mainAxisSize: MainAxisSize.min,
+                      crossAxisAlignment: CrossAxisAlignment.start,
+                      children: [
+                        const Text("Select one of the AI-suggested names:"),
+                        const SizedBox(height: 12),
+                        Flexible(
+                          child: ListView.builder(
+                            shrinkWrap: true,
+                            itemCount: response.length,
+                            itemBuilder: (context, index) {
+                              final suggestion = response[index];
+                              return ListTile(
+                                title: RichText(
+                                  text: TextSpan(
+                                    children: [
+                                      TextSpan(
+                                        text: suggestion.name,
+                                        style: const TextStyle(
+                                          fontWeight: FontWeight.bold,
+                                          color: Colors.black,
+                                        ),
+                                      ),
+                                    ],
+                                  ),
+                                ),
+                                subtitle: Column(
+                                  crossAxisAlignment: CrossAxisAlignment.start,
+                                  children: [
+                                    const SizedBox(height: 4),
+                                    Text(
+                                      suggestion.description,
+                                      maxLines: 3,
+                                      overflow: TextOverflow.ellipsis,
+                                      style: const TextStyle(fontSize: 13),
+                                    ),
+                                  ],
+                                ),
+                                selected: selectedIndex == index,
+                                selectedTileColor: Theme.of(context).colorScheme.primaryContainer,
+                                onTap: () {
+                                  setState(() {
+                                    selectedIndex = index;
+                                  });
+                                },
+                              );
+                            },
+                          ),
+                        ),
+                      ],
+                    ),
+                  ),
+                  actions: [
+                    TextButton(
+                      onPressed: () {
+                        Navigator.pop(context);
+                      },
+                      child: const Text("Cancel"),
+                    ),
+                    TextButton(
+                      onPressed: selectedIndex >= 0 ? () async {
+                        final selectedName = response[selectedIndex].name;
+                        final selectedDescription = response[selectedIndex].description;
+                        Navigator.pop(context);
+                        await _updateDiscussion(discussion.did, selectedName, selectedDescription);
+                        
+                      } : null, // Disable if nothing selected
+                      child: const Text("Apply Selected Name"),
+                    ),
+                  ],
+                );
+              },
             );
           },
         );
@@ -582,16 +768,29 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
   // Method to rename a discussion
   Future<void> _renameDiscussion(Discussion discussion) async {
     final TextEditingController nameController = TextEditingController(text: discussion.name);
+    final TextEditingController descriptionController = TextEditingController(text: discussion.description);
     
     await showDialog(
       context: context,
       builder: (BuildContext context) {
         return AlertDialog(
           title: const Text("Rename Discussion"),
-          content: TextField(
-            controller: nameController,
-            decoration: const InputDecoration(labelText: "New name"),
-            autofocus: true,
+          content:  Column(
+            mainAxisSize: MainAxisSize.min,
+            children: [
+              TextField(
+                controller: nameController,
+                decoration: const InputDecoration(labelText: "New name"),
+              ),
+              const SizedBox(height: 16),
+              TextField(
+                controller: descriptionController,
+                decoration: const InputDecoration(labelText: "Description"),
+                style: const TextStyle(fontSize: 13), // Smaller text size
+                maxLines: 3, // Allow up to 3 lines
+                minLines: 1, // Minimum 1 line
+              ),
+            ],
           ),
           actions: [
             TextButton(
@@ -601,12 +800,19 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
               child: const Text("Cancel"),
             ),
             TextButton(
-              onPressed: () {
+              onPressed: () async {
+                final String newName = nameController.text.trim();
+                final String newDescription = descriptionController.text.trim();
+                
+                if (newName.isEmpty) {
+                  ScaffoldMessenger.of(context).showSnackBar(
+                    const SnackBar(content: Text("Name cannot be empty"))
+                  );
+                  return;
+                }
+                
                 Navigator.pop(context);
-                // In a real app, you would update via API
-                setState(() {
-                  // Here you would make an API call to update the name
-                });
+                await _updateDiscussion(discussion.did, newName, newDescription);
               },
               child: const Text("Save"),
             ),
@@ -616,46 +822,7 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
     );
     
     nameController.dispose();
-  }
-
-  // Method to edit discussion description
-  Future<void> _editDiscussionDescription(Discussion discussion) async {
-    final TextEditingController descController = TextEditingController(text: discussion.description);
-    
-    await showDialog(
-      context: context,
-      builder: (BuildContext context) {
-        return AlertDialog(
-          title: const Text("Edit Description"),
-          content: TextField(
-            controller: descController,
-            decoration: const InputDecoration(labelText: "Description"),
-            maxLines: 3,
-            autofocus: true,
-          ),
-          actions: [
-            TextButton(
-              onPressed: () {
-                Navigator.pop(context);
-              },
-              child: const Text("Cancel"),
-            ),
-            TextButton(
-              onPressed: () {
-                Navigator.pop(context);
-                // In a real app, you would update via API
-                setState(() {
-                  // Here you would make an API call to update the description
-                });
-              },
-              child: const Text("Save"),
-            ),
-          ],
-        );
-      },
-    );
-    
-    descController.dispose();
+    descriptionController.dispose();
   }
 
   // Method to delete a discussion
@@ -692,8 +859,72 @@ class _ChatPageState extends State<ChatPage> with SingleTickerProviderStateMixin
           _selectedDiscussionId = 0;
           _messages.clear();
         }
+        // TODO: Implement delete discussion API call
+        // Remove the discussion from the list
         // Here you would make an API call to delete the discussion
       });
     }
   }
+  Future<void> _updateDiscussion(int did, String selectedName, String selectedDescription) async {
+    // Update the discussion with the selected name and description
+    final updateRequest = DiscussionUpdateRequest(
+      did: did,
+      name: selectedName,
+      description: selectedDescription,
+    );
+    
+    try {
+      final discussion = await _discussionService.updateDiscussion(updateRequest);
+      
+      if (mounted) {
+        setState(() {
+          // Update local state - find and update the discussion
+          final index = _discussions.indexWhere((d) => d.did == did);
+          if (index >= 0) {
+            _discussions[index] = discussion;
+          }
+        });
+        
+        ScaffoldMessenger.of(context).showSnackBar(
+          const SnackBar(content: Text("Discussion updated successfully"))
+        );
+      }
+    } catch (error) {
+      if (mounted) {
+        ScaffoldMessenger.of(context).showSnackBar(
+          SnackBar(content: Text("Failed to update discussion: $error"))
+        );
+      }
+    }
+
+  }
+
+  // Add this new method to toggle the favorite state
+  Future<void> _toggleFavorite(Discussion discussion) async {
+    final updateRequest = DiscussionUpdateRequest(
+      did: discussion.did,
+      name: discussion.name,
+      description: discussion.description,
+      //isFavorite: !discussion.isFavorite,
+    );
+    
+    try {
+      final updatedDiscussion = await _discussionService.updateDiscussion(updateRequest);
+      
+      setState(() {
+        // Update discussion in the local list
+        final index = _discussions.indexWhere((d) => d.did == discussion.did);
+        if (index >= 0) {
+          _discussions[index] = updatedDiscussion;
+        }
+      });
+    } catch (error) {
+      if (mounted) {
+        ScaffoldMessenger.of(context).showSnackBar(
+          SnackBar(content: Text("Failed to update favorite status: $error"))
+        );
+      }
+    }
+  }
 }
+

------------------ codechatui/lib/src/models/discussion.dart ------------------
index 281cb23..06b0a1b 100644
@@ -46,3 +46,31 @@ class Discussion {
     };
   }
 }
+class DiscussionNameSuggestion {
+  final String name;
+  final String description;
+
+  DiscussionNameSuggestion({required this.name, required this.description});
+
+  factory DiscussionNameSuggestion.fromJson(Map<String, dynamic> json) {
+    return DiscussionNameSuggestion(
+      name: json['name'],
+      description: json['description'],
+    );
+  }
+}
+class DiscussionUpdateRequest {
+  final int did;
+  final String name;
+  final String description;
+
+  DiscussionUpdateRequest({required this.did, required this.name, required this.description});
+
+  Map<String, dynamic> toJson() {
+    return {
+      'did': did,
+      'name': name,
+      'description': description,
+    };
+  }
+}

-------------------- codechatui/lib/src/models/message.dart --------------------
index c0898ad..b1dd105 100644
@@ -8,6 +8,7 @@ class Message {
   final String role; // 'user', 'assistant', etc.
   final int authorid;
   final String text; // this corresponds to 'message' in Java
+  bool isLoading = false;
   final DateTime timestamp; // kept for compatibility
 
   Message({
@@ -16,6 +17,7 @@ class Message {
     required this.text,
     this.role = 'user',
     this.authorid = 0,
+    this.isLoading = false,
     DateTime? timestamp,
   }) : timestamp = timestamp ?? DateTime.now();
 
@@ -163,3 +165,18 @@ class AIAnswerItem {
     }
   }
 }
+class MessageCreateRequest {
+  final int did;
+  final String role;
+  final String message;
+
+  MessageCreateRequest({required this.did, required this.role, required this.message});
+
+  Map<String, dynamic> toJson() {
+    return {
+      'did': did,
+      'role': role,
+      'message': message,
+    };
+  }
+}

--------------------- codechatui/lib/src/pricing_page.dart ---------------------
index cdb63e7..43a36ef 100644
@@ -87,7 +87,7 @@ class _PricingPageState extends State<PricingPage> {
             const SizedBox(height: 24),
             SizedBox(
               width: double.infinity,
-              child: ElevatedButton(
+              child: title!='Free'? ElevatedButton(
                 onPressed: () {},
                 style: ElevatedButton.styleFrom(
                   backgroundColor: isPrimary
@@ -104,7 +104,7 @@ class _PricingPageState extends State<PricingPage> {
                   elevation: isPrimary ? 4 : 0,
                 ),
                 child: Text(buttonText),
-              ),
+              ): const SizedBox.shrink()
             ),
           ],
         ),

------------- codechatui/lib/src/services/discussion_service.dart -------------
index 3bea7d7..fec7986 100644
@@ -15,7 +15,7 @@ class DiscussionService {
       };
 
   
-  // Create a new discussion
+  // Create a new open ai thread
   Future<Discussion> createDiscussion(int projectId, String? title) async {
     final response = await http.post(
       Uri.parse(baseUrl),
@@ -27,12 +27,56 @@ class DiscussionService {
     );
     
     if (response.statusCode == 200) {
-      Discussion discussion = jsonDecode(response.body)['id'];
+      Discussion discussion = Discussion.fromJson(jsonDecode(response.body));
       return discussion;
     } else {
       throw Exception('Failed to create Discussion: ${response.body}');
     }
   }
+
+  // Add a new message to a discussion
+  // Add to the OpenAi thread
+  Future<Message> askQuestion(MessageCreateRequest request) async {
+    final response = await http.post(
+      Uri.parse('$baseUrl/ask-question'),
+      headers: _headers,
+      body: json.encode(request.toJson()),
+    );
+    
+    if (response.statusCode == 200) {
+      return Message.fromJson(jsonDecode(response.body));
+    } else {
+      throw Exception('Failed to ask question: ${response.body}');
+    }
+  }
+  // Create an openAI run 
+  // Add the answer to the OpenAi thread
+  Future<Message> answerQuestion(int did) async {
+    final response = await http.post(
+      Uri.parse('$baseUrl/$did/answer-question'),
+      headers: _headers,
+    );
+    
+    if (response.statusCode == 200) {
+      return Message.fromJson(jsonDecode(response.body));
+    } else {
+      throw Exception('Failed to answer question: ${response.body}');
+    }
+  }
+  // Update an existing discussion
+  Future<Discussion> updateDiscussion(DiscussionUpdateRequest discussion) async {
+    final response = await http.put(
+      Uri.parse('$baseUrl/${discussion.did}'),
+      headers: _headers,
+      body: json.encode(discussion.toJson()),
+    );
+    
+    if (response.statusCode != 200) {
+      throw Exception('Failed to update discussion: ${response.body}');
+    }
+    return Discussion.fromJson(jsonDecode(response.body));
+  }
+
   // Get all discussions for a project
   Future<List<Discussion>> getDiscussionsByProject(int projectId) async {
     final response = await http.get(
@@ -50,7 +94,10 @@ class DiscussionService {
   
   // Get a specific discussion with its messages
   Future<Discussion> getDiscussion(int discussionId) async {
-    final response = await http.get(Uri.parse('$baseUrl/$discussionId'));
+    final response = await http.get(
+      Uri.parse('$baseUrl/$discussionId'),
+      headers: _headers,
+  );
     
     if (response.statusCode == 200) {
       return Discussion.fromJson(jsonDecode(response.body));
@@ -59,15 +106,22 @@ class DiscussionService {
     }
   }
   
-  // Get messages for a discussion
-  Future<List<Message>> getDiscussionMessages(int discussionId) async {
-    final response = await http.get(Uri.parse('$baseUrl/$discussionId/messages'));
+  //Use AI to get a name and description sugestion for a discussion 
+  Future<List<DiscussionNameSuggestion>> getNamesSuggestion(int did) async {
+    final response = await http.get(
+      Uri.parse('$baseUrl/$did/suggest'),
+      headers: _headers,
+    );
     
     if (response.statusCode == 200) {
-      final List<dynamic> data = jsonDecode(response.body);
-      return data.map((json) => Message.fromJson(json)).toList();
+      final String answer = response.body;
+      final List<dynamic> data = jsonDecode(answer);
+      return data.map((json) => DiscussionNameSuggestion.fromJson(json)).toList();
     } else {
-      throw Exception('Failed to load messages');
+      throw Exception('Failed to load suggestions');
     }
+    
+
   }
+
 }

-------------- codechatui/lib/src/widgets/ai_response_widget.dart --------------
index 69331fb..213a666 100644
@@ -137,13 +137,22 @@ class AIResponseWidget extends StatelessWidget {
                     border: Border.all(color: Colors.grey[300]!),
                   ),
                   width: double.infinity,
-                  child: SyntaxView(
-                    code: answer.code!,
-                    syntax: answer.getSyntaxLanguage(),
-                    syntaxTheme: SyntaxTheme.vscodeDark(),
-                    withZoom: true,
-                    withLinesCount: true,
-                    fontSize: 12,
+                  child: Container(
+                    decoration: BoxDecoration(
+                      color: Color(0xFF1E1E1E),
+                      borderRadius: BorderRadius.circular(8),
+                      border: Border.all(color: Colors.grey[700]!),
+                    ),
+                    width: double.infinity,
+                    alignment: Alignment.topLeft, // Force left alignment
+                    child: SyntaxView(
+                      code: answer.code!,
+                      syntax: answer.getSyntaxLanguage(),
+                      syntaxTheme: SyntaxTheme.vscodeDark(),
+                      withZoom: true,
+                      withLinesCount: true,
+                      fontSize: 12,
+                    ),
                   ),
                 ),
                 const SizedBox(height: 8),

-------------------------------- src/.DS_Store --------------------------------
index 254fc3a..4820d59 100644
Binary files a/src/.DS_Store and b/src/.DS_Store differ

------------------------------ src/main/.DS_Store ------------------------------
index a1c4513..bf2a0ff 100644
Binary files a/src/main/.DS_Store and b/src/main/.DS_Store differ

--- src/main/java/com/unbumpkin/codechat/controller/CodechatController.java ---
index 31ad6dc..5515da9 100644
@@ -29,6 +29,7 @@ import com.unbumpkin.codechat.service.openai.ProjectFileCategorizer.Types;
 import com.unbumpkin.codechat.service.openai.VectorStoreService;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
+import com.unbumpkin.codechat.domain.Message;
 import com.unbumpkin.codechat.domain.Project;
 import com.unbumpkin.codechat.domain.openai.Assistant;
 import com.unbumpkin.codechat.domain.openai.OaiFile;
@@ -40,7 +41,7 @@ import com.unbumpkin.codechat.repository.MessageRepository;
 import com.unbumpkin.codechat.repository.ProjectRepository;
 import com.unbumpkin.codechat.repository.openai.AssistantRepository;
 import com.unbumpkin.codechat.repository.openai.OaiFileRepository;
-import com.unbumpkin.codechat.repository.openai.ThreadRepository;
+import com.unbumpkin.codechat.repository.openai.OaiThreadRepository;
 import com.unbumpkin.codechat.repository.openai.VectorStoreRepository;
 import com.unbumpkin.codechat.security.CustomAuthentication;
 
@@ -69,7 +70,7 @@ public class CodechatController {
     @Autowired 
     private MessageRepository messageRepository;
     @Autowired
-    private ThreadRepository threadRepository;
+    private OaiThreadRepository threadRepository;
     @Autowired DiscussionRepository discussionRepository;
 
     private int getCurrentUserId() {
@@ -108,6 +109,7 @@ public class CodechatController {
         return new ResponseEntity<String>("All data deleted", HttpStatus.OK);
     }
 
+    
     @PostMapping("create-project")
     public ResponseEntity<Project> createProject(
         @RequestBody CreateProjectRequest request

-- src/main/java/com/unbumpkin/codechat/controller/DiscussionController.java --
index 323fe26..5f9e876 100644
@@ -4,10 +4,34 @@ import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
 
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 import com.unbumpkin.codechat.domain.Discussion;
+import com.unbumpkin.codechat.domain.Message;
+import com.unbumpkin.codechat.domain.openai.Assistant;
+import com.unbumpkin.codechat.domain.openai.OaiThread;
 import com.unbumpkin.codechat.repository.DiscussionRepository;
+import com.unbumpkin.codechat.repository.MessageRepository;
+import com.unbumpkin.codechat.repository.openai.AssistantRepository;
+import com.unbumpkin.codechat.repository.openai.OaiThreadRepository;
+import com.unbumpkin.codechat.service.openai.ChatService;
+import com.unbumpkin.codechat.service.openai.OaiMessageService;
+import com.unbumpkin.codechat.service.openai.OaiRunService;
+import com.unbumpkin.codechat.service.openai.OaiThreadService;
+import com.unbumpkin.codechat.service.openai.ProjectFileCategorizer.Types;
+import com.unbumpkin.codechat.service.openai.BaseOpenAIClient.Models;
+import com.unbumpkin.codechat.service.openai.BaseOpenAIClient.Roles;
+import com.unbumpkin.codechat.service.request.AddOaiThreadRequest;
+import com.unbumpkin.codechat.service.request.DiscussionNameSuggestion;
+import com.unbumpkin.codechat.service.request.DiscussionUpdateRequest;
+import com.unbumpkin.codechat.service.request.MessageCreateRequest;
 
+import java.io.IOException;
+import java.sql.Timestamp;
+import java.time.Instant;
 import java.util.List;
+import java.util.Map;
 
 @RestController
 @RequestMapping("/api/v1/discussions")
@@ -15,12 +39,92 @@ public class DiscussionController {
 
     @Autowired
     private DiscussionRepository discussionRepository;
+    @Autowired
+    private MessageRepository messageRepository;
+    @Autowired
+    private AssistantRepository assistantRepository;
+    @Autowired
+    private OaiThreadService threadService;
+    @Autowired
+    private OaiThreadRepository threadRepository;
+    @Autowired
+    ObjectMapper objectMapper;
+    @Autowired 
+    OaiThreadService oaiThreadService;
+
+
 
     @PostMapping
-    public ResponseEntity<Discussion> createDiscussion(@RequestBody Discussion discussion) {
-        Discussion answer=discussionRepository.addDiscussion(discussion);
-        return ResponseEntity.ok(answer);
+    public ResponseEntity<Discussion> createDiscussion(
+        @RequestBody Discussion discussionRequest
+    ) throws IOException {
+        Discussion discussion=discussionRepository.addDiscussion(discussionRequest);
+        Assistant assistant=assistantRepository.getAssistantByProjectId(discussion.projectId());
+        String oaiThreadId=threadService.createThread();
+        System.out.println("OpenAi thread " + oaiThreadId+" created...");
+        threadRepository.addThread(new AddOaiThreadRequest(oaiThreadId, assistant.codevsid(),discussion.did(), "code"));
+
+        return ResponseEntity.ok(discussion);
+    }
+    @PostMapping("/ask-question")
+    public ResponseEntity<Message> askQuestion(
+        @RequestBody MessageCreateRequest request
+    ) throws IOException {
+        try {
+            Message returnedMessage=messageRepository.addMessage(request);
+            Discussion discussion=discussionRepository.getDiscussionById(returnedMessage.discussionId());
+            Map<Types,OaiThread> threadMap=threadRepository.getAllThreadsByDiscussionId(discussion.did());
+            OaiThread thread=threadMap.get(Types.code);
+            OaiMessageService messageService=new OaiMessageService(thread.oaiThreadId());
+            String oaiMsgId=messageService.createMessage(Roles.user,returnedMessage.message());
+            System.out.println("OpenAi message " + oaiMsgId+" created...");
+            return ResponseEntity.ok(returnedMessage);
+        } catch (Exception e) {
+            System.out.println("exception in askQuestion: " + e.getMessage());
+            e.printStackTrace();
+            throw e;
+        }
     }
+    @PostMapping("/{did}/answer-question")
+    public ResponseEntity<Message> answerQuestion(
+        @PathVariable int did
+    ) throws IOException {
+        Discussion discussion=discussionRepository.getDiscussionById(did);
+        Assistant assistant=assistantRepository.getAssistantByProjectId(discussion.projectId());
+        Map<Types,OaiThread> threadMap=threadRepository.getAllThreadsByDiscussionId(did);
+        OaiThread thread=threadMap.get(Types.code);
+        OaiRunService runService=new OaiRunService(assistant.oaiAid(), thread.oaiThreadId());
+        OaiMessageService msgService = new OaiMessageService(thread.oaiThreadId());
+        String OaiRunId=runService.create();
+        System.out.println("Starting OpenAi run " + OaiRunId+"...");
+        System.out.println("Waiting for answer...");
+        runService.waitForAnswer(OaiRunId);
+        JsonNode jsonNode = msgService.retrieveMessage(msgService.listMessages().get(0));
+        JsonNode answerNode=jsonNode.findValue("value");
+        String answer=answerNode.asText();
+        System.out.println("Answer: "+answer);
+        Message message=messageRepository.addMessage(
+            new MessageCreateRequest(
+                did, Roles.assistant.toString(),answer
+            ));
+        // test with fake data
+        // Message message = new Message(3,55, "assistant", 36,
+        // """
+        // Answer: {
+        //    "question": "create a run controller",
+        //     "answers": [
+        //         {
+        //         "explanation": "To create a new controller named 'RunController', you would typically define it within your project's structure, following the conventions used for other controllers. Below is an example of how you might define this controller in Java, assuming you are using a framework like Spring Boot.",
+        //         "language": "Java",
+        //         "code": "package com.example.project.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class RunController {\n\n    @GetMapping(\"/run\")\n    public String run() {\n        return \"Running operations...\";\n    }\n}",
+        //         "references": []
+        //         }
+        //     ]
+        //     }
+        // """,Timestamp.from(Instant.now()));
+        return ResponseEntity.ok(message);
+    }
+
 
     @GetMapping("/{did}")
     public ResponseEntity<Discussion> getDiscussion(@PathVariable int did) {
@@ -33,10 +137,35 @@ public class DiscussionController {
     }
 
     @PutMapping("/{did}")
-    public ResponseEntity<Void> updateDiscussion(@PathVariable int did, @RequestBody Discussion discussion) {
-        discussionRepository.updateDiscussion(discussion);
-        return ResponseEntity.ok().build();
+    public ResponseEntity<Discussion> updateDiscussion(@PathVariable int did, @RequestBody DiscussionUpdateRequest updateRequest) {
+        Discussion discussion=discussionRepository.updateDiscussion(updateRequest);
+        return ResponseEntity.ok(discussion);
+    }
+
+    @GetMapping("{did}/suggest")
+    public ResponseEntity<DiscussionNameSuggestion[]> suggestName(
+        @PathVariable int did
+    ) throws JsonProcessingException, IOException {
+        ChatService chatService=new ChatService(
+            Models.gpt_4o, 
+            """
+            You are a great software engineer and you are working on a project. 
+            You need to suggest 5 meaningfull names and descriptions for a discussion. 
+            Your answer should be formatted as a json array: [{"name": "name1", "description": "description1"}, {"name": "name2", "description": "description2"}, {"name": "name3", "description": "description3"}],
+            your names should be less than 25 characters long.
+            your descriptions should be less than 225 characters long.
+            """,
+            0.2f
+        );
+        List<Message> messages=messageRepository.getAllMessagesByDiscussionId(did);
+        String json=objectMapper.writeValueAsString(messages);
+        chatService.addMessage("user", json);
+        String answer=chatService.answer();
+        String jsonResponse=answer.substring(answer.indexOf("```json")+7, answer.lastIndexOf("```"));
+        DiscussionNameSuggestion[] suggestions = objectMapper.readValue(jsonResponse, DiscussionNameSuggestion[].class);
+        return ResponseEntity.ok(suggestions);
     }
+    
 
     @DeleteMapping("/{did}")
     public ResponseEntity<Void> deleteDiscussion(@PathVariable int did) {

---- src/main/java/com/unbumpkin/codechat/controller/MessageController.java ----
index d5a8553..972a390 100644
@@ -2,11 +2,16 @@ package com.unbumpkin.codechat.controller;
 
 import com.unbumpkin.codechat.domain.Message;
 import com.unbumpkin.codechat.repository.MessageRepository;
+import com.unbumpkin.codechat.service.request.MessageCreateRequest;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
 
 import java.util.List;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+
 
 @RestController
 @RequestMapping("/api/v1/messages")
@@ -15,13 +20,13 @@ public class MessageController {
     @Autowired
     private MessageRepository messageRepository;
 
+    
     @PostMapping
-    public ResponseEntity<String> addMessage(
-        @RequestBody Message message, 
-        @RequestBody int discussionId
+    public ResponseEntity<Message> addMessage(
+        @RequestBody MessageCreateRequest request
     ) {
-        messageRepository.addMessage(discussionId, message);
-        return ResponseEntity.ok("Message added successfully");
+        Message returnedMessage=messageRepository.addMessage(request);
+        return ResponseEntity.ok(returnedMessage);
     }
 
     @GetMapping("/{msgId}")

 src/main/java/com/unbumpkin/codechat/controller/openai/OaiFileController.java 
index 7097570..88e731f 100644
@@ -28,8 +28,8 @@ import com.unbumpkin.codechat.domain.openai.OaiFile.Purposes;
 import com.unbumpkin.codechat.exception.ResourceNotFoundException;
 import com.unbumpkin.codechat.repository.openai.OaiFileRepository;
 import com.unbumpkin.codechat.service.openai.OaiFileService;
-import com.unbumpkin.codechat.service.openai.request.UploadDirRequest;
-import com.unbumpkin.codechat.service.openai.request.UploadFileRequest;
+import com.unbumpkin.codechat.service.request.UploadDirRequest;
+import com.unbumpkin.codechat.service.request.UploadFileRequest;
 
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.tags.Tag;

----------- src/main/java/com/unbumpkin/codechat/domain/Message.java -----------
index ed791e7..5e683d1 100644
@@ -1,10 +1,13 @@
 package com.unbumpkin.codechat.domain;
 
+import java.sql.Timestamp;
+
 public record Message(
     int msgid,
     int discussionId,
     String role,
     int authorid,
-    String message
+    String message,
+    Timestamp created
 ) {
 }
\ No newline at end of file

-------- src/main/java/com/unbumpkin/codechat/domain/openai/Thread.java --------
deleted file mode 100644
index f2dacbb..0000000
@@ -1,10 +0,0 @@
-package com.unbumpkin.codechat.domain.openai;
-
-public record Thread(
-    int threadid,
-    String oaiThreadId,
-    Integer vsid,
-    int discussionId,
-    String type
-) {
-}
\ No newline at end of file

-- src/main/java/com/unbumpkin/codechat/repository/DiscussionRepository.java --
index 249a9c0..0bb4fdb 100644
@@ -16,6 +16,7 @@ import org.springframework.stereotype.Repository;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.context.SecurityContextHolder;
 import com.unbumpkin.codechat.security.CustomAuthentication;
+import com.unbumpkin.codechat.service.request.DiscussionUpdateRequest;
 import com.unbumpkin.codechat.domain.Discussion;
 
 @Repository
@@ -109,7 +110,7 @@ public class DiscussionRepository {
             JOIN core.project p ON d.projectid = p.projectid
             LEFT JOIN core.sharedproject sp ON p.projectid = sp.projectid
             WHERE d.projectid = ? AND (p.authorid = ? OR sp.userid = ?)
-            order by d.did
+            order by d.created desc
         """;
         int userId = getCurrentUserId();
         List<Discussion> discussions ;
@@ -125,17 +126,21 @@ public class DiscussionRepository {
     /**
      * Update a discussion.
      * @param discussion The discussion to update.
+     * @return The updated discussion.
      */
-    public void updateDiscussion(Discussion discussion) {
+    public Discussion updateDiscussion(DiscussionUpdateRequest updateRequest) {
         String sql = """
             UPDATE core.discussion d
             SET name = ?, description = ?
             FROM core.project p
             LEFT JOIN core.sharedproject sp ON p.projectid = sp.projectid
             WHERE d.did = ? AND d.projectid = p.projectid AND (p.authorid = ? OR sp.userid = ?)
+            RETURNING d.did, d.projectid, d.name, d.description, d.isfavorite, d.created
         """;
         int userId = getCurrentUserId();
-        jdbcTemplate.update(sql, discussion.name(), discussion.description(), discussion.did(), userId, userId);
+        return jdbcTemplate.queryForObject(
+            sql, rowMapper, updateRequest.name(), updateRequest.description(), updateRequest.did(), userId, userId
+        );
     }
 
     /**
@@ -170,4 +175,5 @@ public class DiscussionRepository {
         String deleteDiscussionsSql = "DELETE FROM core.discussion";
         jdbcTemplate.update(deleteDiscussionsSql);
     }
+    
 }
\ No newline at end of file

---- src/main/java/com/unbumpkin/codechat/repository/MessageRepository.java ----
index acaebcd..51a02f7 100644
@@ -9,7 +9,7 @@ import org.springframework.stereotype.Repository;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.context.SecurityContextHolder;
 import com.unbumpkin.codechat.security.CustomAuthentication;
-
+import com.unbumpkin.codechat.service.request.MessageCreateRequest;
 import com.unbumpkin.codechat.domain.Message;
 
 @Repository
@@ -23,7 +23,8 @@ public class MessageRepository {
         rs.getInt("did"),
         rs.getString("role"),
         rs.getInt("authorid"),
-        rs.getString("message")
+        rs.getString("message"),
+        rs.getTimestamp("created")
     );
 
     private int getCurrentUserId() {
@@ -33,6 +34,7 @@ public class MessageRepository {
         }
         throw new IllegalStateException("No authenticated user found");
     }
+
     private CustomAuthentication getCurrentUser() {
         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
         if (authentication instanceof CustomAuthentication) {
@@ -45,19 +47,25 @@ public class MessageRepository {
      * Add a message to the database.
      * @param message The message to add.
      */
-    public void addMessage(int did, Message message) {
+    public Message addMessage( MessageCreateRequest createRequest) {
         String sql = """
-            INSERT INTO core.message (msgid, did, role, authorid, message)
-            SELECT ?, ?, ?, ?, ?
+            INSERT INTO core.message (did, role, authorid, message)
+            SELECT ?, ?, ?, ?
             WHERE EXISTS (
                 SELECT 1
-                FROM core.sharedproject sp
-                JOIN core.discussion d ON sp.projectid = d.projectid
-                WHERE d.did = ? AND sp.userid = ?
+                FROM core.project p
+                JOIN core.discussion d ON p.projectid = d.projectid
+                LEFT JOIN core.sharedproject sp ON p.projectid = sp.projectid
+                WHERE d.did = ? AND (sp.userid = ? OR p.authorid = ?)
             )
+            RETURNING msgid, did, role, authorid, message, created
         """;
         int userId = getCurrentUserId();
-        jdbcTemplate.update(sql, message.msgid(), message.discussionId(), message.role(), message.authorid(), message.message(), message.discussionId(), userId);
+        //( int did, String role, int authorid, String message) {
+        return jdbcTemplate.queryForObject(
+            sql, rowMapper, createRequest.did(), createRequest.role(),  userId, createRequest.message(), 
+            createRequest.did(), userId, userId
+        );
     }
 
     /**
@@ -70,10 +78,11 @@ public class MessageRepository {
             SELECT m.*
             FROM core.message m
             JOIN core.discussion d ON m.did = d.did
-            JOIN core.sharedproject sp ON d.projectid = sp.projectid
-            WHERE m.msgid = ? AND sp.userid = ?
+            JOIN core.project p ON d.projectid = p.projectid
+            LEFT JOIN core.sharedproject sp ON p.projectid = sp.projectid
+            WHERE m.msgid = ? AND (sp.userid = ? OR p.authorid = ?)
         """;
-        return jdbcTemplate.queryForObject(sql, rowMapper, msgid, getCurrentUserId());
+        return jdbcTemplate.queryForObject(sql, rowMapper, msgid, getCurrentUserId(), getCurrentUserId());
     }
 
     /**
@@ -85,11 +94,13 @@ public class MessageRepository {
         String sql = """
             SELECT m.*
             FROM core.message m
-            JOIN core.discussion d ON m.did = d.did
-            JOIN core.sharedproject sp ON d.projectid = sp.projectid
-            WHERE m.did = ? AND sp.userid = ?
+                JOIN core.discussion d ON m.did = d.did
+                JOIN core.project p ON d.projectid = p.projectid
+                LEFT JOIN core.sharedproject sp ON p.projectid = sp.projectid
+            WHERE m.did = ? AND (sp.userid = ? OR p.authorid = ?)
+            order by m.created desc
         """;
-        return jdbcTemplate.query(sql, rowMapper, did, getCurrentUserId());
+        return jdbcTemplate.query(sql, rowMapper, did, getCurrentUserId(), getCurrentUserId());
     }
 
     /**
@@ -102,13 +113,14 @@ public class MessageRepository {
             SET role = ?, authorid = ?, message = ?
             WHERE m.msgid = ? AND EXISTS (
                 SELECT 1
-                FROM core.sharedproject sp
-                JOIN core.discussion d ON sp.projectid = d.projectid
-                WHERE d.did = ? AND sp.userid = ?
+                FROM core.project p
+                JOIN core.discussion d ON p.projectid = d.projectid
+                LEFT JOIN core.sharedproject sp ON p.projectid = sp.projectid
+                WHERE d.did = ? AND (sp.userid = ? OR p.authorid = ?)
             )
         """;
         int userId = getCurrentUserId();
-        jdbcTemplate.update(sql, message.role(), message.authorid(), message.message(), message.msgid(), message.discussionId(), userId);
+        jdbcTemplate.update(sql, message.role(), message.authorid(), message.message(), message.msgid(), message.discussionId(), userId, userId);
     }
 
     /**
@@ -120,13 +132,15 @@ public class MessageRepository {
             DELETE FROM core.message
             WHERE msgid = ? AND EXISTS (
                 SELECT 1
-                FROM core.sharedproject sp
-                JOIN core.discussion d ON sp.projectid = d.projectid
-                WHERE d.did = core.message.did AND sp.userid = ?
+                FROM core.project p
+                JOIN core.discussion d ON p.projectid = d.projectid
+                LEFT JOIN core.sharedproject sp ON p.projectid = sp.projectid
+                WHERE d.did = core.message.did AND (sp.userid = ? OR p.authorid = ?)
             )
         """;
-        jdbcTemplate.update(sql, msgid, getCurrentUserId());
+        jdbcTemplate.update(sql, msgid, getCurrentUserId(), getCurrentUserId());
     }
+
     /**
      * Delete all messages.
      */

 src/main/java/com/unbumpkin/codechat/repository/openai/AssistantRepository.java 
index 3752c04..86822cc 100644
@@ -77,6 +77,19 @@ public class AssistantRepository {
         """;
         return jdbcTemplate.queryForObject(sql, rowMapper, aid);
     }
+    /*
+     * Get the assistant by project ID.
+     * @param projectId The project ID.
+     * @return The assistant.
+     */
+    public Assistant getAssistantByProjectId(int projectId) {
+        String sql = """
+            SELECT a.*
+            FROM core.assistant a
+            WHERE a.projectid = ?
+        """;
+        return jdbcTemplate.queryForObject(sql, rowMapper, projectId);
+    }
 
     /**
      * Retrieve all assistants.

- src/main/java/com/unbumpkin/codechat/repository/openai/ThreadRepository.java -
deleted file mode 100644
index 385b43f..0000000
@@ -1,113 +0,0 @@
-package com.unbumpkin.codechat.repository.openai;
-
-import java.util.List;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.jdbc.core.JdbcTemplate;
-import org.springframework.jdbc.core.RowMapper;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.stereotype.Repository;
-import com.unbumpkin.codechat.domain.openai.Thread;
-import com.unbumpkin.codechat.security.CustomAuthentication;
-
-@Repository
-public class ThreadRepository {
-
-    @Autowired
-    private JdbcTemplate jdbcTemplate;
-
-    private final RowMapper<Thread> rowMapper = (rs, rowNum) -> new Thread(
-        rs.getInt("threadid"),
-        rs.getString("oai_threadid"),
-        rs.getObject("vsid", Integer.class),
-        rs.getInt("discussionId"),
-        rs.getString("type")
-    );
-
-    /**
-     * Add a thread to the database.
-     * @param thread The thread to add.
-     */
-    public void addThread(Thread thread) {
-        String sql = """
-            INSERT INTO core.thread (threadid, oai_threadid, vsid, did, type)
-            VALUES (?, ?, ?, ?, ?)
-        """;
-        jdbcTemplate.update(sql, thread.threadid(), thread.oaiThreadId(), thread.vsid(), thread.discussionId(), thread.type());
-    }
-
-    /**
-     * Retrieve a thread by ID.
-     * @param threadid The thread ID.
-     * @return The thread.
-     */
-    public Thread getThreadById(int threadid) {
-        String sql = """
-            SELECT t.*
-            FROM core.thread t
-            WHERE t.threadid = ?
-        """;
-        return jdbcTemplate.queryForObject(sql, rowMapper, threadid);
-    }
-
-    /**
-     * Retrieve all threads by discussion ID.
-     * @param discussionId The discussion ID.
-     * @return A list of threads.
-     */
-    public List<Thread> getAllThreadsByDiscussionId(int discussionId) {
-        String sql = """
-            SELECT t.*
-            FROM core.thread t
-            WHERE t.did = ?
-        """;
-        return jdbcTemplate.query(sql, rowMapper, discussionId);
-    }
-
-    /**
-     * Update a thread.
-     * @param thread The thread to update.
-     */
-    public void updateThread(Thread thread) {
-        String sql = """
-            UPDATE core.thread
-            SET oai_threadid = ?, vsid = ?, did = ?, type = ?
-            WHERE threadid = ?
-        """;
-        jdbcTemplate.update(sql, thread.oaiThreadId(), thread.vsid(), thread.discussionId(), thread.type(), thread.threadid());
-    }
-
-    /**
-     * Delete a thread.
-     * @param threadid The thread ID.
-     */
-    public void deleteThread(int threadid) {
-        String sql = """
-            DELETE FROM core.thread
-            WHERE threadid = ?
-        """;
-        jdbcTemplate.update(sql, threadid);
-    }
-    
-
-    private CustomAuthentication getCurrentUser() {
-        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
-        if (authentication instanceof CustomAuthentication) {
-            return ((CustomAuthentication) authentication);
-        }
-        throw new IllegalStateException("No authenticated user found");
-    }
-
-    /**
-     * Delete all threads.
-     */
-    public void deleteAll() {
-        CustomAuthentication currentUser = getCurrentUser();
-        if (currentUser == null || !currentUser.isAdmin()) {
-            throw new IllegalStateException("Only admins can delete all messages");
-        }
-        // Delete all records in the thread table
-        String deleteThreadsSql = "DELETE FROM core.thread";
-        jdbcTemplate.update(deleteThreadsSql);
-    }
-}
\ No newline at end of file

-------- src/main/java/com/unbumpkin/codechat/service/openai/Chat.java --------
deleted file mode 100644
index a7ae9a5..0000000
@@ -1,79 +0,0 @@
-/*
- * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
- */
-
-package com.unbumpkin.codechat.service.openai;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Scanner;
-
-import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-import okhttp3.Request;
-import okhttp3.RequestBody;
-
-
-/**
- *
- * @author benoitmarsot
- */
-public class Chat extends BaseOpenAIClient {
-    private static final String API_URL = "https://api.openai.com/v1/chat/completions";
-    private final Models model;
-    private List<Message> messages;
-    public Chat(Models model) {
-        this.messages = new ArrayList<>();
-        this.model = model;
-        messages.add(new Message("system", "You are a helpful assistant."));
-    }
-
-    public void start() {
-        System.out.println("Chat with "+model.toString()+"!");
-        Scanner scanner = new Scanner(System.in);
-        while (true) {
-            System.out.print("Enter your prompt (type 'bye' to quit): ");
-            String userPrompt = scanner.nextLine();
-            if (userPrompt.equalsIgnoreCase("bye")) {
-                break;
-            }
-            messages.add(new Message("user", userPrompt));
-            try {
-                JsonNode jsonNode = generateText(userPrompt);
-                String textResponse=jsonNode.get("choices").get(0).get("message").get("content").asText();
-                messages.add(new Message("assistant", textResponse));
-                System.out.println(
-                    String.format("Response from OpenAI: %s",
-                        textResponse
-                ));
-            } catch (IOException e) {
-                e.printStackTrace();
-            }
-        }
-        scanner.close();
-    }
-    private JsonNode generateText(String prompt) throws IOException {
-
-        String json = new ObjectMapper().writeValueAsString(
-            new ChatRequest(this.model.toString(), messages, 0.5)
-        );
-        RequestBody body = RequestBody.create(json, JSON_MEDIA_TYPE);
-
-        Request request = new Request.Builder()
-                .url(API_URL)
-                .post(body)
-                .addHeader("Authorization", "Bearer " + API_KEY)
-                .addHeader("Content-Type", "application/json")
-                .build();
-
-
-        return this.executeRequest(request);
-    }
-    private record ChatRequest(String model, List<Message> messages, double temperature) {
-    }
-    private record Message(String role, String content) {
-    }
-
-}

------- src/main/java/com/unbumpkin/codechat/service/openai/Message.java -------
deleted file mode 100644
index 60203df..0000000
@@ -1,139 +0,0 @@
-package com.unbumpkin.codechat.service.openai;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
-
-import com.fasterxml.jackson.databind.JsonNode;
-
-import okhttp3.Request;
-import okhttp3.RequestBody;
-
-
-public class Message extends BaseOpenAIClient { 
-
-    private static final String API_URL = "https://api.openai.com/v1/threads/%s/messages";
-
-    private final String threadId;
-    public Message(String threadId) {
-        this.threadId = threadId;
-    }
-
-    public String createMessage(Roles role, String content) throws IOException {
-        String url = String.format(API_URL, threadId);
-        String json = String.format("{\"role\": \"%s\", \"content\": \"%s\"}", role.toString(), content);
-        RequestBody body = RequestBody.create(json, JSON_MEDIA_TYPE);
-
-        Request request = new Request.Builder()
-                .url(url)
-                .post(body)
-                .addHeader("Authorization", "Bearer " + API_KEY)
-                .addHeader("OpenAI-Beta", "assistants=v2")
-                .addHeader("Content-Type", "application/json")
-                .build();
-        return this.executeRequest(request).get("id").asText();
-    }
-
-    public List<String> listMessages() throws IOException {
-        String url = String.format(API_URL, threadId);
-
-        Request request = new Request.Builder()
-                .url(url)
-                .get()
-                .addHeader("Authorization", "Bearer " + API_KEY)
-                .addHeader("Content-Type", "application/json")
-                .addHeader("OpenAI-Beta", "assistants=v2")
-                .build();
-
-        JsonNode jsonNode = executeRequest(request);
-        List<String> messageIds = new ArrayList<>();
-        for (JsonNode message : jsonNode.get("data")) {
-            messageIds.add(message.get("id").asText());
-        }
-        return messageIds;
-    }
-
-    public JsonNode retrieveMessage(String messageId) throws IOException {
-        String url = String.format(API_URL + "/%s", threadId, messageId);
-
-        Request request = new Request.Builder()
-                .url(url)
-                .get()
-                .addHeader("Authorization", "Bearer " + API_KEY)
-                .addHeader("Content-Type", "application/json")
-                .addHeader("OpenAI-Beta", "assistants=v2")
-                .build();
-        return this.executeRequest(request);
-    }
-
-    public JsonNode modifyMessage(String messageId, String metadata) throws IOException {
-        String url = String.format(API_URL + "/%s", threadId, messageId);
-        String json = String.format("{\"metadata\": %s}", metadata);
-        RequestBody body = RequestBody.create(json, JSON_MEDIA_TYPE);
-
-        Request request = new Request.Builder()
-            .url(url)
-            .put(body)
-            .addHeader("Authorization", "Bearer " + API_KEY)
-            .addHeader("OpenAI-Beta", "assistants=v2")
-            .addHeader("Content-Type", "application/json")
-            .build();
-
-        return this.executeRequest(request);
-    }
-
-    public void deleteMessage(String messageId) throws IOException {
-        String url = String.format(API_URL + "/%s", threadId, messageId);
-
-        Request request = new Request.Builder()
-            .url(url)
-            .delete()
-            .addHeader("Authorization", "Bearer " + API_KEY)
-            .addHeader("Content-Type", "application/json")
-            .addHeader("OpenAI-Beta", "assistants=v2")
-            .build();
-
-        this.executeRequest(request);
-    }
-
-}
-/*
- * Curls samples of Message api
-  * Create
-    curl https://api.openai.com/v1/threads/thread_abc123/messages \
-    -H "Content-Type: application/json" \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "OpenAI-Beta: assistants=v2" \
-    -d '{
-        "role": "user",
-        "content": "How does AI work? Explain it in simple terms."
-        }'
-
-  * List
-    curl https://api.openai.com/v1/threads/thread_abc123/messages \
-    -H "Content-Type: application/json" \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "OpenAI-Beta: assistants=v2"
-  * Retrieve
-    curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123 \
-    -H "Content-Type: application/json" \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "OpenAI-Beta: assistants=v2"
-  * Modify
-    curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123 \
-    -H "Content-Type: application/json" \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "OpenAI-Beta: assistants=v2" \
-    -d '{
-        "metadata": {
-            "modified": "true",
-            "user": "abc123"
-        }
-        }'
-  * delete
-    curl -X DELETE https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123 \
-    -H "Content-Type: application/json" \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "OpenAI-Beta: assistants=v2"
- */
\ No newline at end of file

------ src/main/java/com/unbumpkin/codechat/service/openai/OaiThread.java ------
deleted file mode 100644
index 8fb20bd..0000000
@@ -1,116 +0,0 @@
-package com.unbumpkin.codechat.service.openai;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import org.springframework.stereotype.Service;
-
-import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-import okhttp3.Request;
-import okhttp3.RequestBody;
-
-@Service
-public class OaiThread extends BaseOpenAIClient {
-    private static final String API_URL = "https://api.openai.com/v1/threads";
-    public OaiThread() {
-        super();
-    }
-    public String createThread() throws IOException {
-        return this.createThread(new ArrayList<>(), new HashMap<>() );
-    }
-    public String createThread(
-        List<Message> messages, Map<String, String> metadata
-    ) throws IOException {
-        String json = new ObjectMapper().writeValueAsString(new CreateThreadRequest(
-            messages,metadata
-        ));
-        RequestBody body = RequestBody.create(json, JSON_MEDIA_TYPE);
-
-        Request request = new Request.Builder()
-            .url(API_URL)
-            .post(body)
-            .addHeader("Authorization", "Bearer " + API_KEY)
-            .addHeader("OpenAI-Beta", "assistants=v2")
-            .addHeader("Content-Type", "application/json")
-            .build();
-        //System.out.println("Request:"+json);
-
-        return this.executeRequest(request).get("id").asText();
-    }
-    public JsonNode retrieveThread(String threadId) throws IOException {
-        Request request = new Request.Builder()
-                .url(API_URL+"/"+threadId)
-                .get()
-                .addHeader("Authorization", "Bearer " + API_KEY)
-                .addHeader("Content-Type", "application/json")
-                .addHeader("OpenAI-Beta", "assistants=v2")
-                .build();
-        return this.executeRequest(request);
-    }
-    public JsonNode modifyThread(String threadId, Map<String, String> metadata) throws IOException {
-        String json = new ObjectMapper().writeValueAsString(new CreateThreadRequest(
-            null, metadata
-        ));
-        RequestBody body = RequestBody.create(json, JSON_MEDIA_TYPE);
-
-        Request request = new Request.Builder()
-            .url(API_URL+"/"+threadId)
-            .post(body)
-            .addHeader("Authorization", "Bearer " + API_KEY)
-            .addHeader("OpenAI-Beta", "assistants=v2")
-            .addHeader("Content-Type", "application/json")
-            .build();
-        return this.executeRequest(request);
-    }
-    public void deleteThread(String threadId) throws IOException {
-        Request request = new Request.Builder()
-                .url(API_URL+"/"+threadId)
-                .delete()
-                .addHeader("Authorization", "Bearer " + API_KEY)
-                .addHeader("Content-Type", "application/json")
-                .addHeader("OpenAI-Beta", "assistants=v2")
-                .build();
-
-        executeRequest(request);
-    }
-    
-    private record CreateThreadRequest(List<Message> messages, Map<String, String> metadata) {
-    }
-}
-/*
- * Curls samples of Thread api
- * Create
-    curl https://api.openai.com/v1/threads \
-    -H "Content-Type: application/json" \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "OpenAI-Beta: assistants=v2" \
-    -d ''
-  * Retrieve
-    curl https://api.openai.com/v1/threads/thread_abc123 \
-    -H "Content-Type: application/json" \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "OpenAI-Beta: assistants=v2"
-  * Modify
-    curl https://api.openai.com/v1/threads/thread_abc123 \
-    -H "Content-Type: application/json" \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "OpenAI-Beta: assistants=v2" \
-    -d '{
-        "metadata": {
-            "modified": "true",
-            "user": "abc123"
-        }
-        }'
-  * delete
-    curl https://api.openai.com/v1/threads/thread_abc123 \
-    -H "Content-Type: application/json" \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "OpenAI-Beta: assistants=v2" \
-    -X DELETE
-
- */
\ No newline at end of file

--------- src/main/java/com/unbumpkin/codechat/service/openai/Run.java ---------
deleted file mode 100644
index a747d7d..0000000
@@ -1,225 +0,0 @@
-package com.unbumpkin.codechat.service.openai;
-
-import java.lang.Thread;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
-
-import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.ObjectMapper;
-
-import okhttp3.Request;
-import okhttp3.RequestBody;
-
-public class Run extends BaseOpenAIClient { 
-    private static final String API_URL = "https://api.openai.com/v1/threads/%s/runs";
-    private static final String API_URL_WITH_RUN = "https://api.openai.com/v1/threads/%s/runs/%s";
-
-    private final String assistantId;;
-    private final String threadId;
-    public Run(String assistantId, String threadId) {
-        this.assistantId = assistantId;
-        this.threadId = threadId;
-    }
-    public Run(String assistantId,Message.Roles role, List<Message> messages) throws IOException {
-        this.assistantId = assistantId;
-        this.createThreadAndRun(role, messages);
-        this.threadId = "";
-    }
-
-    public String create() throws IOException {
-        String url = String.format(API_URL, threadId);
-        String json = String.format("{\"assistant_id\": \"%s\"}", assistantId);
-        RequestBody body = RequestBody.create(json, JSON_MEDIA_TYPE);
-
-        Request request = new Request.Builder()
-                .url(url)
-                .post(body)
-                .addHeader("Authorization", "Bearer " + API_KEY)
-                .addHeader("Content-Type", "application/json")
-                .addHeader("OpenAI-Beta", "assistants=v2")
-                .build();
-
-        return this.executeRequest(request).get("id").asText();
-    }
-
-    public JsonNode createThreadAndRun(Message.Roles role, List<Message> messages) throws IOException {
-        String url = "https://api.openai.com/v1/threads/runs";
-        String msgJson = new ObjectMapper().writeValueAsString(messages);
-        String json = String.format("{\"assistant_id\": \"%s\", \"thread\": {\"messages\": %s}}, \"parallel_tool_calls\": false", assistantId, role.name(), msgJson);
-        RequestBody body = RequestBody.create(json, JSON_MEDIA_TYPE);
-
-        Request request = new Request.Builder()
-                .url(url)
-                .post(body)
-                .addHeader("Authorization", "Bearer " + API_KEY)
-                .addHeader("Content-Type", "application/json")
-                .addHeader("OpenAI-Beta", "assistants=v2")
-                .build();
-
-        return this.executeRequest(request);
-    }
-
-    public List<String> list() throws IOException {
-        String url = String.format(API_URL, threadId);
-
-        Request request = new Request.Builder()
-            .url(url)
-            .get()
-            .addHeader("Authorization", "Bearer " + API_KEY)
-            .addHeader("Content-Type", "application/json")
-            .addHeader("OpenAI-Beta", "assistants=v2")
-            .build();
-
-    
-        JsonNode jsonNode = executeRequest(request);
-        List<String> runIds = new ArrayList<>();
-        for (JsonNode run : jsonNode.get("data")) {
-            runIds.add(run.get("id").asText());
-        }
-        return runIds;
-    }
-
-    public JsonNode retrieve( String runId) throws IOException {
-        String url = String.format(API_URL_WITH_RUN, threadId, runId);
-
-        Request request = new Request.Builder()
-                .url(url)
-                .get()
-                .addHeader("Authorization", "Bearer " + API_KEY)
-                .addHeader("Content-Type", "application/json")
-                .addHeader("OpenAI-Beta", "assistants=v2")
-                .build();
-
-        return this.executeRequest(request);
-    }
-
-    public JsonNode modify(String runId, String metadata) throws IOException {
-        String url = String.format(API_URL_WITH_RUN, threadId, runId);
-        String json = String.format("{\"metadata\": %s}", metadata);
-        RequestBody body = RequestBody.create(json, JSON_MEDIA_TYPE);
-
-        Request request = new Request.Builder()
-                .url(url)
-                .put(body)
-                .addHeader("Authorization", "Bearer " + API_KEY)
-                .addHeader("Content-Type", "application/json")
-                .addHeader("OpenAI-Beta", "assistants=v2")
-                .build();
-
-        return this.executeRequest(request);
-    }
-
-    public JsonNode submitToolOutputs(String runId, List<ToolOutput> toolOutputs) throws IOException {
-        String url = String.format(API_URL_WITH_RUN + "/submit_tool_outputs", threadId, runId);
-        String json = String.format("{\"tool_outputs\": %s}", new ObjectMapper().writeValueAsString(toolOutputs));
-        RequestBody body = RequestBody.create(json, JSON_MEDIA_TYPE);
-
-        Request request = new Request.Builder()
-                .url(url)
-                .post(body)
-                .addHeader("Authorization", "Bearer " + API_KEY)
-                .addHeader("Content-Type", "application/json")
-                .addHeader("OpenAI-Beta", "assistants=v2")
-                .build();
-
-        return this.executeRequest(request);
-    }
-
-    public void cancelRun(String runId) throws IOException {
-        String url = String.format(API_URL_WITH_RUN + "/cancel", threadId, runId);
-
-        Request request = new Request.Builder()
-                .url(url)
-                .post(RequestBody.create("", null))
-                .addHeader("Authorization", "Bearer " + API_KEY)
-                .addHeader("OpenAI-Beta", "assistants=v2")
-                .build();
-
-        executeRequest(request);
-    }
-    public void waitForAnswer(String runId) {
-        String status="";
-        do {
-            try {
-                Thread.sleep((long)1000);
-                JsonNode jsonNode = this.retrieve(runId);
-                status=jsonNode.get("status").asText();
-                JsonNode lastError=jsonNode.get("last_error");
-                if(lastError.size()>0) {
-                    throw new RuntimeException(lastError.get("message").textValue());
-                }
-                //System.out.println("Status:"+status);
-            } catch (IOException | InterruptedException e) {
-                e.printStackTrace();
-            }
-
-        } while(!status.equals("completed")&&!status.equals("failed"));
-
-        
-    }
-    private record ToolOutput(String tool_call_id, String output) {}
-}
-/*
- * Curls samples of Run api
-  * Create
-    curl https://api.openai.com/v1/threads/thread_abc123/runs \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "Content-Type: application/json" \
-    -H "OpenAI-Beta: assistants=v2" \
-    -d '{
-        "assistant_id": "asst_abc123"
-    }'
-  * CreateThreadAndRun
-    curl https://api.openai.com/v1/threads/runs \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "Content-Type: application/json" \
-    -H "OpenAI-Beta: assistants=v2" \
-    -d '{
-        "assistant_id": "asst_abc123",
-        "thread": {
-            "messages": [
-            {"role": "user", "content": "Explain deep learning to a 5 year old."}
-            ]
-        }
-        }'
-
-  * List
-    curl https://api.openai.com/v1/threads/thread_abc123/runs \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "Content-Type: application/json" \
-    -H "OpenAI-Beta: assistants=v2"
-  * Retrieve
-    curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123 \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "OpenAI-Beta: assistants=v2"
-  * Modify
-    curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123 \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "Content-Type: application/json" \
-    -H "OpenAI-Beta: assistants=v2" \
-    -d '{
-        "metadata": {
-        "user_id": "user_abc123"
-        }
-    }'
-  * SubmitTool
-    curl https://api.openai.com/v1/threads/thread_123/runs/run_123/submit_tool_outputs \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "Content-Type: application/json" \
-    -H "OpenAI-Beta: assistants=v2" \
-    -d '{
-        "tool_outputs": [
-        {
-            "tool_call_id": "call_001",
-            "output": "70 degrees and sunny."
-        }
-        ]
-    }'
-  * Cancel
-    curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/cancel \
-    -H "Authorization: Bearer $OPENAI_API_KEY" \
-    -H "OpenAI-Beta: assistants=v2" \
-    -X POST
-*/

 src/main/java/com/unbumpkin/codechat/service/openai/request/UploadDirRequest.java 
deleted file mode 100644
index 65d8160..0000000
@@ -1,7 +0,0 @@
-package com.unbumpkin.codechat.service.openai.request;
-
-public record UploadDirRequest(
-    String rootDir, 
-    String extension, 
-    String purpose
-) {}

 src/main/java/com/unbumpkin/codechat/service/openai/request/UploadFileRequest.java 
deleted file mode 100644
index e1ec8d8..0000000
@@ -1,6 +0,0 @@
-package com.unbumpkin.codechat.service.openai.request;
-
-public record UploadFileRequest(
-    String filepath, 
-    String purpose
-) {}
\ No newline at end of file

------------------------ src/main/sql/createTables.sql ------------------------
index fba7360..3d6cefa 100644
@@ -47,7 +47,7 @@ create table if not exists core.assistant (
 
 create table if not exists core.thread (
     threadid serial,
-    oai_threadid varchar(30) not null,
+    oai_threadid varchar(31) not null,
     vsid int null,
     did int not null,
     type varchar(20) not null -- code, markup, config, full

